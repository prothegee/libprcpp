set(CMAKE_CXX_STANDARD 17)

if(${CMAKE_CXX_STANDARD} LESS_EQUAL 17)
    set(CMAKE_CXX_STANDARD 17)
endif()

set(LIBPRCPP_IS_DEBUG false)

# 0:undefined 1:debug 2:staging 3:demo 4:release
set(LIBPRCPP_BUILD_STATUS 0)

set(LIBPRCPP_BUILD_COMPILER_ID 0)

# [V] 0:undefined
# [V] 1:linux
# [V] 2:windows
# [V] 3:macos
# [X] 4:android
# [X] 5:ios
# [X] 6:web
# [X] 7:ps
# [X] 8:xbox
# [X] 9:nintendo
set(LIBPRCPP_BUILD_TARGET 0)

set(LIBPRCPP_VERSION_MAJOR  1)
set(LIBPRCPP_VERSION_MINOR  0)
set(LIBPRCPP_VERSION_PATCH  0)
set(LIBPRCPP_VERSION_DATES  20241222)
set(LIBPRCPP_VERSION_STRING "${LIBPRCPP_VERSION_MAJOR}.${LIBPRCPP_VERSION_MINOR}.${LIBPRCPP_VERSION_PATCH}.${LIBPRCPP_VERSION_DATES}")

string(TOLOWER ${CMAKE_SYSTEM_NAME}      LIBPRCPP_SYSTEM_NAME)
string(TOLOWER ${CMAKE_SYSTEM_PROCESSOR} LIBPRCPP_SYSTEM_PROCESSOR)
string(TOLOWER ${CMAKE_BUILD_TYPE}       LIBPRCPP_SYSTEM_BUILD_TYPE)

# assign build status
if(LIBPRCPP_SYSTEM_BUILD_TYPE STREQUAL "debug")
    set(LIBPRCPP_BUILD_STATUS 1)
elseif(LIBPRCPP_SYSTEM_BUILD_TYPE STREQUAL "profile")
    set(LIBPRCPP_BUILD_STATUS 1)
elseif(LIBPRCPP_SYSTEM_BUILD_TYPE STREQUAL "minsizerel")
    set(LIBPRCPP_BUILD_STATUS 2)
elseif(LIBPRCPP_SYSTEM_BUILD_TYPE STREQUAL "relwithdebinfo")
    set(LIBPRCPP_BUILD_STATUS 3)
    elseif(LIBPRCPP_SYSTEM_BUILD_TYPE STREQUAL "release")
    set(LIBPRCPP_BUILD_STATUS 4)
endif()

if(LIBPRCPP_SYSTEM_BUILD_TYPE STREQUAL "release")
    set(LIBPRCPP_IS_DEBUG false)
else()
    set(LIBPRCPP_IS_DEBUG true)
endif()

# INCLUDE SOME DIRS?

# overwrite
if(${LIBPRCPP_SYSTEM_NAME} STREQUAL "darwin")
    set(LIBPRCPP_SYSTEM_NAME "macos")
endif()

# assign build target num
if(${LIBPRCPP_SYSTEM_NAME} STREQUAL "linux")
    set(LIBPRCPP_BUILD_TARGET 1)
elseif(${LIBPRCPP_SYSTEM_NAME} STREQUAL "windows")
    set(LIBPRCPP_BUILD_TARGET 2)
elseif(${LIBPRCPP_SYSTEM_NAME} STREQUAL "macos")
    set(LIBPRCPP_BUILD_TARGET 3)
else()
    message(NOTICE "-- ${PROJECT_NAME}:\n   build system is unknown")
endif()

set(LIBPRCPP_OUTPUT "${LIBPRCPP_SYSTEM_NAME}_${LIBPRCPP_SYSTEM_PROCESSOR}/${LIBPRCPP_SYSTEM_BUILD_TYPE}")

set(LIBPRCPP_OUTPUT_DIR "${CMAKE_SOURCE_DIR}/bin/${LIBPRCPP_SYSTEM_NAME}_${LIBPRCPP_SYSTEM_PROCESSOR}/${LIBPRCPP_SYSTEM_BUILD_TYPE}")

if(LIBPRCPP_PROJECT_USING_BUILD_TAGET_DIRECTORY)
    set(EXECUTABLE_OUTPUT_PATH         "${LIBPRCPP_OUTPUT_DIR}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${LIBPRCPP_OUTPUT_DIR}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${LIBPRCPP_OUTPUT_DIR}")
    set(CMAKE_PDB_OUTPUT_DIRECTORY     "${LIBPRCPP_OUTPUT_DIR}")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${LIBPRCPP_OUTPUT_DIR}")
endif()

message(NOTICE "-- ${PROJECT_NAME}:\n   configuring ${PROJECT_NAME} v${LIBPRCPP_VERSION_STRING} for ${LIBPRCPP_OUTPUT} using c++${CMAKE_CXX_STANDARD}")
